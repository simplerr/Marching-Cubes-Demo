#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : enable

#define RIDGE_NOISE
#include "noise.glsl"

#define POSITION_SCALE 32.0f // Value makes it look OK

layout (set = 0, binding = 0, r32f) uniform writeonly image3D sdfImage;

float sdBox(vec3 p, vec3 b)
{
   vec3 d = abs(p) - b;
   return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}

float density(vec3 pos)
{
   float density = -1;

   vec3 scaledPos = pos / POSITION_SCALE;

   // Generally increase solid volumes but decrease it by Y coordinate
   float noise3d = -fbm(scaledPos) + 0.0 + 0.15 * scaledPos.y;

   // Important: Need to divide pos.y instead of multiplying fbm() by large factor to avoid floating point precision errors
   float heightmap = fbm(pos.xz / 100.0f) + 1.3 - pos.y / 100.0f;

   // Combine 3D noise and heightmap
   // density = max(noise3d, heightmap); // Add 3d noise
   density = min(-noise3d, heightmap); // Subtract 3d noise
   //density = noise3d;
   //density = heightmap;

   // Apply bounding box
   vec3 side = imageSize(sdfImage);
   float boundingBox = sdBox(side / 2 - pos, side / 2 - 1.0f);
   density = min(-boundingBox, density);

   return density;
}

void main(void)
{
   float density = density(gl_GlobalInvocationID.xyz / 1.0f);
   imageStore(sdfImage, ivec3(gl_GlobalInvocationID.xyz), vec4(density));
}